* packages
#+begin_src emacs-lisp :tangle yes
  (require 'package)
  (add-to-list 'package-archives
               '("marmalade" . "http://marmalade-repo.org/packages/"))
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives
               '("melpa-stable" . "http://stable.melpa.org/packages/"))
  (add-to-list 'package-archives
               '("org" . "http://orgmode.org/elpa/"))
  (package-initialize)
  (paradox-require 'oauth2)
  (paradox-require 'elnode)
  (paradox-require 'undo-tree)
  (paradox-require 'company)
  (paradox-require 'company-quickhelp)
  (paradox-require 'helm)
  (paradox-require 'magit)
  (paradox-require 'projectile)
  (paradox-require 'helm-projectile)
  (paradox-require 'moe-theme)
  (paradox-require 'smart-mode-line)
  (paradox-require 'org-plus-contrib)
  (paradox-require 'web)
  (paradox-require 'ace-isearch)
  (paradox-require 'tex)
  (paradox-require 'haskell-mode)
  (paradox-require 'paredit)
  (paradox-require 'sx)
  (paradox-require 'magit-svn)
  (paradox-require 'hydra)
  (paradox-require 'helm-c-yasnippet)
  (paradox-require 'helm-ag)
  (paradox-require 'markdown-mode)
  (paradox-require 'ace-window)
  (paradox-require 'cdlatex)
  (paradox-require 'company-cmake)
  (paradox-require 'expand-region)
  (paradox-require 'multiple-cursors)
  (paradox-require 'flycheck)
  (paradox-require 'elisp-slime-nav)
  (paradox-require 'guide-key)
  (paradox-require 'helm-descbinds)
#+end_src
* secrets
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'load-path "~/.emacs.d/notsynced")
  (require 'secret)
#+end_src
* paradox
#+begin_src emacs-lisp :tangle yes
  (setq paradox-execute-asynchronously t)
#+end_src
* nix
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'load-path "~/.nix-profile/share/emacs/site-lisp")
  ; add to load path recursively
  (let ((default-directory "~/.nix-profile/share/emacs/site-lisp"))
    (normal-top-level-add-subdirs-to-load-path))
  (require 'nix-mode)
#+end_src
* pos-tip
#+begin_src emacs-lisp :tangle yes
  (setq pos-tip-background-color "#4e4e4e")
  (setq pos-tip-foreground-color "#5fafd7")
#+end_src
* misc
#+begin_src emacs-lisp :tangle yes
  (setq save-interprogram-paste-before-kill t)
  (setq sml/no-confirm-load-theme t)
  (setq ag-highlight-search t)
  (global-undo-tree-mode)
  (setq show-paren-style 'paranthesis)
  (add-to-list 'auto-mode-alist '("\\.zsh\\'" . sh-mode))
  (winner-mode 1)
#+END_SRC
* company
#+BEGIN_SRC emacs-lisp
  (global-company-mode t)
  (company-quickhelp-mode 1)
#+END_SRC
* dired
#+BEGIN_SRC elisp
  (setq dired-dwim-target t)
  (require 'dired-details+)
  (setq dired-details-hide-link-targets nil)
  (setq-default dired-omit-mode t)
  (define-key dired-mode-map (kbd "C-o") 'dired-omit-mode)
  (setq-default dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^\\.")
#+END_SRC

* helm
#+BEGIN_SRC emacs-lisp
  (require 'helm)

  (setq helm-command-prefix-key "C-c h")
  (setq helm-M-x-fuzzy-match nil)
  (require 'helm-config)
  (require 'helm-eshell)
  (require 'helm-files)
  (require 'helm-grep)
  ;; key bindings

  (setq helm-man-or-woman-function 'woman)
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebihnd tab to do persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

  (define-key helm-grep-mode-map (kbd "<return>")  'helm-grep-mode-jump-other-window)
  (define-key helm-grep-mode-map (kbd "n")  'helm-grep-mode-jump-other-window-forward)
  (define-key helm-grep-mode-map (kbd "p")  'helm-grep-mode-jump-other-window-backward)

  (setq
   helm-google-suggest-use-curl-p t
   helm-scroll-amount 4 ; scroll 4 lines other window using M-<next>/M-<prior>
   helm-quick-update t ; do not display invisible candidates
   helm-idle-delay 0.01 ; be idle for this many seconds, before updating in delayed sources.
   helm-input-idle-delay 0.01 ; be idle for this many seconds, before updating candidate buffer
   helm-ff-search-library-in-sexp t ; search for library in `require' and `declare-function' sexp.

   helm-split-window-default-side 'other ;; open helm buffer in another window
   helm-split-window-in-side-p t ;; open helm buffer inside current window, not occupy whole other window
   helm-buffers-favorite-modes (append helm-buffers-favorite-modes
                                       '(picture-mode artist-mode))
   helm-candidate-number-limit 200 ; limit the number of displayed canidates
   helm-M-x-requires-pattern 0     ; show all candidates when set to 0
   helm-ff-file-name-history-use-recentf t
   helm-move-to-line-cycle-in-source t ; move to end or beginning of source
                                          ; when reaching top or bottom of source.
   ido-use-virtual-buffers t      ; Needed in helm-buffers-list
   helm-buffers-fuzzy-matching t          ; fuzzy matching buffer names when non--nil
                                          ; useful in helm-mini that lists buffers
   )

  ;; Save current position to mark ring when jumping to a different place
  (add-hook 'helm-goto-line-before-hook 'helm-save-current-pos-to-mark-ring)

  (helm-mode 1)
#+END_SRC
* projectile
#+BEGIN_SRC emacs-lisp
  (require 'magit)
  (projectile-global-mode t)
  (require 'helm-projectile)
  (helm-projectile-on)
  (setq projectile-completion-system 'helm)
#+END_SRC

* gui
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (column-number-mode t)
  (require 'moe-theme)
  (moe-dark)
  (setq sml/theme 'dark)
  (if (daemonp)
      (add-hook 'after-make-frame-functions
          (lambda (frame)
            (sml/setup)))
      (sml/setup))
  ;; show-paren-mode
  (setq show-paren-delay 0)
  (show-paren-mode t)
#+END_SRC
* org
#+BEGIN_SRC emacs-lisp
  (setq org-log-done t)
  (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))

  (setq org-directory "~/org")
  (setq org-agenda-files '("~/org"))

  (setq org-file-apps
        '((auto-mode . emacs)
          ("\\.mm\\'" . system)
          ("\\.x?html?\\'" . "firefox %s")
          ("\\.pdf::\\([0-9]+\\)\\'" . "zathura \"%s\" -P %1")
          ("\\.pdf\\'" . "zathura \"%s\"")))

  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)

  (setq org-refile-targets (quote ((org-agenda-files :maxlevel . 2))))
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c a") 'org-agenda)

  (eval-after-load "org-mode"
    '(progn
       (plist-put org-format-latex-options :scale 2.0)))

  (setq org-mobile-directory "~/org/mobile")

  (setq org-default-notes-file (concat org-directory "/notes.org"))

  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
  ;; orgmode babel
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)))

  (setq org-agenda-span 'month)
  (setq org-agenda-custom-commands
        '(("h" agenda "120 days"
           ((org-agenda-show-all-dates nil)
            (org-agenda-span 120))
           )))

  (setq org-src-fontify-natively t)
  (setq org-timer-default-timer 25)

  (add-hook 'org-clock-in-hook (lambda ()
        (org-timer-set-timer 25)))

  (add-hook 'org-clock-out-hook (lambda ()
        (org-timer-set-timer 5)))

  (defun ded/org-show-next-heading-tidily ()
    "Show next entry, keeping other entries closed."
    (if (save-excursion (end-of-line) (outline-invisible-p))
        (progn (org-show-entry) (show-children))
      (outline-next-heading)
      (unless (and (bolp) (org-on-heading-p))
        (org-up-heading-safe)
        (hide-subtree)
        (error "Boundary reached"))
      (org-overview)
      (org-reveal t)
      (org-show-entry)
      (show-children)))

  (defun ded/org-show-previous-heading-tidily ()
    "Show previous entry, keeping other entries closed."
    (let ((pos (point)))
      (outline-previous-heading)
      (unless (and (< (point) pos) (bolp) (org-on-heading-p))
        (goto-char pos)
        (hide-subtree)
        (error "Boundary reached"))
      (org-overview)
      (org-reveal t)
      (org-show-entry)
      (show-children)))

  (setq org-use-speed-commands t)
  (add-to-list 'org-speed-commands-user
               '("n" ded/org-show-next-heading-tidily))
  (add-to-list 'org-speed-commands-user
               '("p" ded/org-show-previous-heading-tidily))

  (eval-after-load "ox-latex" '(add-to-list 'org-latex-classes
            '("koma-article"
               "\\documentclass{scrartcl}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

  (eval-after-load "ox" '(setq org-export-default-language "de-de"))
  (eval-after-load "org" '(setq org-latex-packages-alist '(("ngerman" "babel" nil))))
  (eval-after-load "org" '(setq org-latex-default-packages-alist '(("AUTO" "inputenc" t)
   ("T1" "fontenc" t)
   ("" "fixltx2e" nil)
   ("" "graphicx" t)
   ("" "longtable" nil)
   ("" "float" nil)
   ("" "wrapfig" nil)
   ("" "rotating" nil)
   ("normalem" "ulem" t)
   ("" "amsmath" t)
   ("" "textcomp" t)
   ("" "marvosym" t)
   ("" "wasysym" t)
   ("" "amssymb" t)
   ("hyphens" "url" nil)
   ("" "hyperref" nil)
   "\\tolerance=1000")))

  (setq org-highlight-latex-and-related '(latex script entities))

  (require 'ox-bibtex)
  (setq org-latex-toc-command "\\tableofcontents\n\\clearpage\n")
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+END_SRC
* functions
#+BEGIN_SRC emacs-lisp
  ;; comment out line if no region is selected
  (defun comment-dwim-line (&optional arg)
      "Replacement for the comment-dwim command.
      If no region is selected and current line is not blank and we are not at the end of the line,
      then comment current line.
      Replaces default behaviour of comment-dwim, when it inserts comment at the end of the line."
        (interactive "*P")
        (comment-normalize-vars)
        (if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
            (comment-or-uncomment-region (line-beginning-position) (line-end-position))
          (comment-dwim arg)))

  ;; functions to paste to http://sprunge.us using web.el
  (require 'web)
  (defun sprunge-region (start end)
    (interactive "r")
    (let ((buffer-contents (buffer-substring-no-properties start end))
               (query-data (make-hash-table :test 'equal)))
            (puthash 'sprunge buffer-contents query-data)
        (web-http-post
         (lambda (con header data)
           (kill-new (substring data 0 -1)))
         :url "http://sprunge.us"
         :data query-data)))
  (defun sprunge-buffer ()
    (interactive)
    (sprunge-region (point-min) (point-max)))
#+END_SRC
* bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-;") 'comment-dwim-line)

  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-c h o") 'helm-occur)
  (global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
  (global-set-key (kbd "C-c h x") 'helm-register)

  ;; expand-region
  (pending-delete-mode t)
  (global-set-key (kbd "C-=") 'er/expand-region)

  ;; ace-jump-mode
  (global-set-key (kbd "C-ß") 'ace-jump-char-mode)
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  ;; multiple-cursors
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  (global-set-key (kbd "C-ä") 'mc/mark-sgml-tag-pair)

  (global-ace-isearch-mode)
#+END_SRC
* auctex
#+BEGIN_SRC emacs-lisp
  (setq TeX-view-program-list
        '(("zathura"
           ("zathura" (mode-io-correlate "-sync.sh")
            " "
            (mode-io-correlate "%n:1:%b ")
            "%o"))))
  (setq TeX-view-program-selection '((output-pdf "zathura")))
  (set-default 'preview-scale-function 1.2)
  (require 'tex)
  (add-hook 'LaTeX-mode-hook (lambda () (TeX-global-PDF-mode t)))
  (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
  (eval-after-load "latex" '(progn
                              (add-to-list 'LaTeX-verbatim-environments "comment")
                              ))
  (eval-after-load "tex"
    '(add-to-list 'TeX-command-list
                  '("Glossary" "makeglossaries %s" TeX-run-command nil
                    (latex-mode) :help "Create glossaries")))

#+END_SRC
* haskell
#+BEGIN_SRC emacs-lisp
  (setq haskell-process-args-cabal-repl '("--ghc-option=-ferror-spans" "--with-ghc=ghci-ng"))
  (define-key haskell-mode-map (kbd "C-`") 'haskell-interactive-bring)
  (setq haskell-process-log t)
  (setq haskell-interactive-mode-eval-mode 'haskell-mode)

  (require 'hindent)
  (define-key haskell-mode-map (kbd "C-c i") 'hindent/reformat-decl)
  (setq hindent-style "chris-done")
  (require 'shm)
  (require 'haskell)
  (add-hook 'haskell-mode-hook 'structured-haskell-mode)
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
  (add-hook 'haskell-interactive-mode-hook 'structured-haskell-repl-mode)
  (require 'shm-case-split)
  (define-key shm-map (kbd "C-c C-s") 'shm/case-split)
  (define-key interactive-haskell-mode-map (kbd "M-.") 'haskell-mode-goto-loc)
  (define-key interactive-haskell-mode-map (kbd "C-c C-t") 'haskell-mode-show-type-at)
  (define-key interactive-haskell-mode-map (kbd "C-?") 'haskell-mode-find-uses)
  (add-hook 'haskell-mode-hook 'hindent-mode)
  (setq haskell-process-wrapper-function
     (lambda
       (argv)
       (append
        (list "nix-shell" "-I" "." "--command")
        (list
         (mapconcat
          (quote identity)
          argv " ")))))
#+END_SRC
* mu4e
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/code/emacs/mu/mu4e")
  (require 'mu4e)
  (require 'org-mu4e)
  (defun my-mu4e-shr2text ()
    "Html to text using the shr engine; this can be used in
  `mu4e-html2text-command' in a new enough emacs. Based on code by
  Titus von der Malsburg."
    (interactive)
    (let ((dom (libxml-parse-html-region (point-min) (point-max)))
          ;; When HTML emails contain references to remote images,
          ;; retrieving these images leaks information. For example,
          ;; the sender can see when I openend the email and from which
          ;; computer (IP address). For this reason, it is preferrable
          ;; to not retrieve images.
          ;; See this discussion on mu-discuss:
          ;; https://groups.google.com/forum/#!topic/mu-discuss/gr1cwNNZnXo
          (shr-inhibit-images t))
      (erase-buffer)
      (shr-insert-document dom)
      (goto-char (point-min))))
  ;; default
  (load "mail")
  (if mail-on
      (progn (setq mu4e-html2text-command
                   'my-mu4e-shr2text)
             (setq mu4e-maildir "~/mail")
             (setq mu4e-drafts-folder "/gmail/drafts")
             (setq mu4e-sent-folder   "/gmail/sent")
             (setq mu4e-trash-folder  "/gmail/trash")
             (setq mu4e-get-mail-command "mbsync -a")
             (setq mu4e-update-interval 300)
             (setq mu4e-view-show-addresses t)
             (setq mu4e-headers-include-related t)
             (setq mu4e-headers-show-threads nil)
             (setq mu4e-headers-skip-duplicates t)
             (setq mu4e-split-view 'vertical)
             (setq mu4e-compose-dont-reply-to-self t)
             (setq mu4e-compose-keep-self-cc nil)
             (setq
              user-mail-address (cadr mu4e-user-mail-address-list)
              user-full-name  "Moritz Kiefer"
              mu4e-compose-signature ""
              mu4e-compose-signature-auto-include nil)
             (setq mu4e-attachment-dir "~/downloads")

             (setq   mu4e-maildir-shortcuts
                     '(("/gmail/inbox"     . ?g)
                       ("/holarse/inbox"       . ?h)
                       ("/purelyfunctional/inbox" . ?p)))

             (setq message-send-mail-function 'smtpmail-send-it
                   smtpmail-stream-type 'starttls
                   smtpmail-default-smtp-server "smtp.gmail.com"
                   smtpmail-smtp-server "smtp.gmail.com"
                   smtpmail-smtp-service 587)

             (defvar my-mu4e-account-alist
               `(("gmail"
                  (mu4e-sent-folder "/gmail/sent")
                  (mu4e-drafts-folder "/gmail/drafts")
                  (mu4e-trash-folder "/gmail/trash")
                  (mu4e-sent-messages-behavior delete)
                  (user-mail-address ,(car mu4e-user-mail-address-list))
                  (smtpmail-default-smtp-server "smtp.gmail.com")
                  (smtpmail-smtp-server "smtp.gmail.com")
                  (smtpmail-stream-type starttls)
                  (smtpmail-smtp-service 587))
                 ("holarse"
                  (mu4e-sent-folder "/holarse/sent")
                  (mu4e-drafts-folder "/holarse/drafts")
                  (mu4e-sent-messages-behavior sent)
                  (user-mail-address ,(cddr mu4e-user-mail-address-list))
                  (smtpmail-default-smtp-server "asmtp.mail.hostpoint.ch")
                  (smtpmail-smtp-server "asmtp.mail.hostpoint.ch")
                  (smtpmail-stream-type starttls)
                  (smtpmail-smtp-service 587))
                 ("purelyfunctional"
                  (mu4e-sent-folder "/purelyfunctional/sent")
                  (mu4e-drafts-folder "/purelyfunctional/drafts")
                  (mu4e-sent-messages-behavior sent)
                  (user-mail-address ,(cadr mu4e-user-mail-address-list))
                  (smtpmail-default-smtp-server "cassiopeia.uberspace.de")
                  (smtpmail-smtp-server "cassiopeia.uberspace.de")
                  (smtpmail-stream-type starttls)
                  (smtpmail-smtp-service 587))))

             (defun my-mu4e-set-account ()
               "Set the account for composing a message."
               (let* ((account
                       (if mu4e-compose-parent-message
                           (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                             (string-match "/\\(.*?\\)/" maildir)
                             (match-string 1 maildir))
                         (completing-read (format "Compose with account: (%s) "
                                                  (mapconcat #'(lambda (var) (car var)) my-mu4e-account-alist "/"))
                                          (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                                          nil t nil nil (caar my-mu4e-account-alist))))
                      (account-vars (cdr (assoc account my-mu4e-account-alist))))
                 (if account-vars
                     (mapc #'(lambda (var)
                               (set (car var) (cadr var)))
                           account-vars)
                   (error "No email account found"))))

             (add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)

             (setq mu4e-bookmarks '(
                                    ("flag:unread AND NOT flag:trashed AND NOT maildir:/gmail/spam"
                                     "Unread messages"     ?u)
                                    ("date:today..now"                  "Today's messages"     ?t)
                                    ("date:7d..now"                     "Last 7 days"          ?w)
                                    ("mime:image/*"                     "Messages with images" ?p)))

             (add-hook 'mu4e-compose-mode-hook 'mml-secure-message-sign)
             (add-hook 'mu4e-view-mode-hook '(lambda ()
                                               (local-set-key (kbd "<end>") 'end-of-line)
                                               (local-set-key (kbd "<home>") 'beginning-of-line)))

             (setq mu4e-view-show-images t)
             (when (fboundp 'imagemagick-register-types)
               (imagemagick-register-types))
             (add-to-list 'mu4e-view-actions
                          '("View in browser" . mu4e-action-view-in-browser) t)



             ;; don't keep message buffers around
             (setq message-kill-buffer-on-exit t)))
#+END_SRC
* indentation
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
#+END_SRC
* lisp
#+BEGIN_SRC emacs-lisp
  (setq scheme-program-name "guile")
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook 'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           'enable-paredit-mode)
  (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
    (add-hook hook 'turn-on-elisp-slime-nav-mode))
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+END_SRC
* flycheck
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook #'global-flycheck-mode)
  (eval-after-load 'flycheck
    '(add-to-list 'flycheck-checkers 'haskell-process))
  (require 'haskell-flycheck)
  (setq flycheck-emacs-lisp-load-path 'inherit)
#+END_SRC
* browser
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-xdg-open)
#+END_SRC
* gdb
#+BEGIN_SRC emacs-lisp
  (setq gdb-many-windows t)
#+END_SRC
* yasnippet
#+BEGIN_SRC emacs-lisp
  (setq yas-snippet-dirs '("~/code/emacs/snippets/yasnippet-snippets"))
  (setq helm-yas-display-key-on-candidate t)
  (global-set-key (kbd "C-c y") 'helm-yas-complete)
  (yas-global-mode t)
#+END_SRC
* symlinks
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC
* magit
#+BEGIN_SRC emacs-lisp
  (add-hook 'magit-mode-hook 'magit-load-config-extensions)
#+END_SRC
* emmet
#+BEGIN_SRC emacs-lisp
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook  'emmet-mode)
#+END_SRC
* pkgbuild
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/home/moritz/code/emacs/pkgbuild-mode")
  (autoload 'pkgbuild-mode "pkgbuild-mode.el" "PKGBUILD mode." t)
  (add-to-list 'auto-mode-alist '("/PKGBUILD$" . pkgbuild-mode))
#+END_SRC
* abbrev
#+BEGIN_SRC emacs-lisp
(setq-default abbrev-mode t)
(setq abbrev-file-name "~/.emacs.d/abbrev_defs")
#+END_SRC
* ediff
#+BEGIN_SRC emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (setq ediff-split-window-function 'split-window-horizontally)
#+END_SRC
* reveal
#+BEGIN_SRC emacs-lisp
  (setq org-reveal-root "file:///home/moritz/code/web/reveal.js/")
  (setq org-reveal-title-slide-template
        "<h1>%t</h1>
         <h2>%a</h2>
         <h2>%d</h2>")
#+END_SRC
* impress
#+BEGIN_SRC emacs-lisp
(setq org-impress-js-javascript "/home/moritz/code/web/impress.js/js/impress.js")
(setq org-impress-js-stylesheet "/home/moritz/code/web/impress.js/css/impress-demo.css")
#+END_SRC
* idris
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/code/idris/idris-mode")
  (require 'idris-mode)
  (setq idris-metavariable-list-show-expanded t)
#+END_SRC
* skewer
#+BEGIN_SRC emacs-lisp
  (add-hook 'js2-mode-hook 'skewer-mode)
  (add-hook 'css-mode-hook 'skewer-css-mode)
  (add-hook 'html-mode-hook 'skewer-html-mode)
#+END_SRC
* gpgfix
#+BEGIN_SRC emacs-lisp
  (defun epg--list-keys-1 (context name mode)
    (let ((args (append (if (epg-context-home-directory context)
                            (list "--homedir"
                                  (epg-context-home-directory context)))
                        '("--with-colons" "--no-greeting" "--batch"
                          "--with-fingerprint" "--with-fingerprint")
                        (unless (eq (epg-context-protocol context) 'CMS)
                          '("--fixed-list-mode"))))
          (list-keys-option (if (memq mode '(t secret))
                                "--list-secret-keys"
                              (if (memq mode '(nil public))
                                  "--list-keys"
                                "--list-sigs")))
          (coding-system-for-read 'binary)
          keys string field index)
      (if name
          (progn
            (unless (listp name)
              (setq name (list name)))
            (while name
              (setq args (append args (list list-keys-option (car name)))
                    name (cdr name))))
        (setq args (append args (list list-keys-option))))
      (with-temp-buffer
        (apply #'call-process
               (epg-context-program context)
               nil (list t nil) nil args)
        (goto-char (point-min))
        (while (re-search-forward "^[a-z][a-z][a-z]:.*" nil t)
          (setq keys (cons (make-vector 15 nil) keys)
                string (match-string 0)
                index 0
                field 0)
          (while (and (< field (length (car keys)))
                      (eq index
                          (string-match "\\([^:]+\\)?:" string index)))
            (setq index (match-end 0))
            (aset (car keys) field (match-string 1 string))
            (setq field (1+ field))))
        (nreverse keys))))
#+END_SRC
* hydra
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-ä") 'ace-window)
  (global-set-key
   (kbd "M-ö")
   (defhydra hydra-window (:color amaranth)
     "window"
     ("n" windmove-left)
     ("r" windmove-down)
     ("t" windmove-up)
     ("d" windmove-right)
     ("v" (lambda ()
            (interactive)
            (split-window-right)
            (windmove-right))
      "vert")
     ("x" (lambda ()
            (interactive)
            (split-window-below)
            (windmove-down))
      "horz")
     ("t" transpose-frame "'")
     ("o" delete-other-windows "one" :color blue)
     ("a" ace-window "ace")
     ("s" ace-swap-window "swap")
     ("k" ace-delete-window "del")
     ("i" ace-maximize-window "ace-one" :color blue)
     ("b" helm-mini "buf")
     ("m" headlong-bookmark-jump "bmk")
     ("q" nil "cancel")))
  (defhydra hydra-zoom (global-map "<f2>")
    "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out"))
  (defhydra hydra-error (global-map "M-g")
    "goto-error"
    ("h" first-error "first")
    ("j" next-error "next")
    ("k" previous-error "prev")
    ("v" recenter-top-bottom "recenter")
    ("q" nil "quit"))

  (require 'windmove)
  (defun hydra-move-splitter-left (arg)
    "Move window splitter left."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (shrink-window-horizontally arg)
      (enlarge-window-horizontally arg)))

  (defun hydra-move-splitter-right (arg)
    "Move window splitter right."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (enlarge-window-horizontally arg)
      (shrink-window-horizontally arg)))

  (defun hydra-move-splitter-up (arg)
    "Move window splitter up."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (enlarge-window arg)
      (shrink-window arg)))

  (defun hydra-move-splitter-down (arg)
    "Move window splitter down."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (shrink-window arg)
      (enlarge-window arg)))

  (global-set-key
   (kbd "M-ü")
   (defhydra hydra-splitter ()
     "splitter"
     ("n" hydra-move-splitter-left)
     ("r" hydra-move-splitter-down)
     ("t" hydra-move-splitter-up)
     ("d" hydra-move-splitter-right)
     ("q" nil "quit")))
#+END_SRC
* github
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/code/emacs/github")
  (require 'github)
#+END_SRC

* annoying errows
#+begin_src emacs-lisp
  (global-annoying-arrows-mode)
  (setq annoying-arrows-too-far-count 5)
#+end_src

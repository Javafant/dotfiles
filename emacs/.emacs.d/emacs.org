* packages
#+begin_src emacs-lisp :tangle yes
  (package-initialize nil)
  (add-to-list 'package-archives
               '("marmalade" . "http://marmalade-repo.org/packages/"))
  (add-to-list 'package-archives
               '("melpa-stable" . "http://stable.melpa.org/packages/"))
  ;; (add-to-list 'package-archives
  ;;              '("org" . "http://orgmode.org/elpa/"))
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq use-package-verbose t)
  (eval-when-compile
    (require 'use-package))
  (require 'diminish)
#+end_src
* secrets
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'load-path "~/.emacs.d/notsynced")
  (require 'secret)
#+end_src
* swiper/ivy
#+begin_src emacs-lisp :tangle yes
  (use-package swiper
        :ensure t
        :bind (("C-s" . swiper)
               ("C-r" . swiper)
               ("C-c C-r" . ivy-resume)
               ("C-c h m" . woman)
               ("C-x b" . ivy-switch-buffer))
        :config
        (ivy-mode 1)
        (setq ivy-use-virtual-buffers t))
  (use-package counsel
    :ensure t
    :bind (("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("C-h f" . counsel-describe-function)
           ("C-h v" . counsel-describe-variable)
           ("C-h i" . counsel-info-lookup-symbol)
           ("C-h u" . counsel-unicode-char)
           ("C-c k" . counsel-ag)
           ("C-x l" . counsel-locate)
           ("C-c g" . counsel-git-grep)
           ("C-c i" . counsel-imenu)
           ("C-x p" . counsel-list-processes))
    :config
    (ivy-set-actions
             'counsel-find-file
             '(("j" find-file-other-window "other")))
    (ivy-set-actions 'counsel-git-grep
                     '(("j" find-file-other-window "other"))))
#+end_src

* pos-tip
#+begin_src emacs-lisp :tangle yes
  (use-package pos-tip
    :ensure t
    :defer t
    :config
    (setq pos-tip-background-color "#4e4e4e")
    (setq pos-tip-foreground-color "#5fafd7"))
#+end_src
* misc
#+begin_src emacs-lisp :tangle yes
      (setq save-interprogram-paste-before-kill t)
      (setq ag-highlight-search t)
      (blink-cursor-mode -1)
      (use-package undo-tree
        :ensure t
        :config (global-undo-tree-mode)
        :diminish undo-tree-mode)
      (setq show-paren-style 'paranthesis)
      (add-to-list 'auto-mode-alist '("\\.zsh\\'" . sh-mode))
      (winner-mode 1)
      (defalias 'yes-or-no-p 'y-or-n-p)
      (global-unset-key (kbd "C-z"))
      (put 'upcase-region 'disabled nil)
      (use-package ws-butler :ensure t
        :config
        (ws-butler-global-mode)
        (setq ws-butler-keep-whitespace-before-point nil))
#+end_src
* company
#+begin_src emacs-lisp :tangle yes
  (use-package company
    :ensure t
    :diminish company-mode
    :defer 2
    :bind ("C-<tab>" . company-complete)
    :config
    (global-company-mode t)
    (use-package company-cmake
      :ensure t)
    (push 'company-rtags company-backends))
#+end_src
* dired
#+begin_src emacs-lisp :tangle yes
  (use-package dired
    :commands dired-mode
    :bind (:map dired-mode-map ("C-o" . dired-omit-mode))
    :config
    (progn
      (setq dired-dwim-target t)
      (setq-default dired-omit-mode t)
      (setq-default dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^\\.")))
#+end_src

* projectile
#+begin_src emacs-lisp :tangle yes
  (use-package magit-popup
    :ensure t
    :defer t
    :pin melpa-stable)
  (use-package magit
    :ensure t
    :pin melpa-stable
    :commands magit-status
    :config
    (progn
      (use-package magit-svn
        :ensure t
        :pin melpa-stable)
      (setq magit-last-seen-setup-instructions "1.4.0")
      (setq magit-revert-buffers t)
      (setq magit-completing-read-function 'ivy-completing-read)))
  (use-package projectile
    :ensure t
    :commands (projectile-switch-project-by-name projectile-find-file)
    :init
    (projectile-global-mode t)
    (setq projectile-completion-system 'ivy)
    :config
    (defun counsel-switch-project ()
      (interactive)
      (ivy-read "Switch to project: "
                projectile-known-projects
                :sort t
                :require-match t
                :preselect (when (projectile-project-p) (abbreviate-file-name (projectile-project-root)))
                :action '(1
                          ("o" projectile-switch-project-by-name "goto")
                          ("g" magit-status "magit")
                          ("s" (lambda (a) (setq default-directory a) (counsel-git-grep)) "git grep"))
                :caller 'counsel-switch-project))
    (bind-key* "C-c p p" 'counsel-switch-project))
#+end_src
* gui
#+begin_src emacs-lisp :tangle yes
  (setq inhibit-splash-screen t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (column-number-mode t)
  ;; (load-theme 'leuven t)
  ;; (use-package smart-mode-line
  ;;   :ensure t
  ;;   :config
  ;;   (progn (setq sml-no-confirm-load-theme t)
  ;;          (setq sml/theme 'dark)
  ;;          (sml/setup)))
  (use-package moe-theme
    :ensure t
    :config
    (use-package smart-mode-line
      :ensure t
      :config
      (progn
        (setq sml/no-confirm-load-theme t)
        (setq sml/theme 'dark)
        (if (daemonp)
            (add-hook 'after-make-frame-functions
                      (lambda (frame)
                        (sml/setup)))
          (sml/setup)))
      :init (moe-dark)))

  ;; show-paren-mode
  (setq show-paren-delay 0)
  (show-paren-mode t)
#+end_src
* org
#+begin_src emacs-lisp :tangle yes
  (use-package libmpdee
    :ensure t
    :commands get-current-song
    :functions (mpd-conn-new mpd-get-status mpd-get-songs)
    :config
    (defun get-current-song ()
      (let* ((mpd-conn (mpd-conn-new "localhost" 6600))
             (mpd-status (mpd-get-status mpd-conn)))
        (if (and mpd-status (eq 'play (plist-get mpd-status 'state)))
            (let* ((song (car (mpd-get-songs mpd-conn "currentsong")))
                   (title (plist-get song 'Title))
                   (album (plist-get song 'Album))
                   (artist (plist-get song 'Artist)))
              `(title ,title artist ,artist album ,album))
          (get-spotify-song)))))
  (defun format-current-song (song)
    (let ((title (plist-get song 'title))
          (artist (plist-get song 'artist))
          (album (plist-get song 'album)))
      (format "%s|%s|%s" title artist album)))
  (defun get-spotify-song ()
    (with-temp-buffer
      (call-process "dbus-send"
                    nil
                    t
                    t
                    "--print-reply"
                    "--session"
                    "--dest=org.mpris.MediaPlayer2.spotify"
                    "/org/mpris/MediaPlayer2"
                    "org.freedesktop.DBus.Properties.Get"
                    "string:org.mpris.MediaPlayer2.Player"
                    "string:Metadata")
      (goto-char (point-min))
      (let ((album
             (progn
               (search-forward-regexp "album\"\n.*string \"\\\(.*\\\)\"")
               (match-string 1)))
            (artist
             (progn
               (search-forward-regexp "artist\"\n.*\n.*string \"\\\(.*\\\)\"")
               (match-string 1)))
            (title
             (progn
               (search-forward-regexp "title\"\n.*string \"\\\(.*\\\)\"")
               (match-string 1))))
        `(title ,title artist ,artist album ,album))))
  (use-package org
    :load-path ("~/code/org-mode/lisp/" "~/code/org-mode/contrib/lisp/")
    :pin manual
    :mode ("\\.org\\'" . org-mode)
    :bind (("C-c l" . org-store-link)
           ("C-c c" . org-capture)
           ("C-c a" . org-agenda)
           ("C-c b" . org-iswitchb)
           ("C-c C-w" . org-refile)
           ("C-c j" . org-clock-goto)
           ("C-c C-x C-o" . org-clock-out))
    :config
    (progn
      (setq org-directory "~/org")
      (setq org-agenda-files '("~/org"))
      (setq org-mobile-directory "~/org/mobile")
      (setq org-default-notes-file (concat org-directory "/notes.org"))
      (setq org-latex-listings t)
      (setq org-agenda-sorting-strategy
            '((agenda habit-down time-up priority-down category-keep)
              (todo category-up priority-down)
              (tags priority-down category-keep)
              (search category-keep)))
      (use-package ob-ipython
        :load-path "~/code/emacs/ob-ipython")
      (setq org-confirm-babel-evaluate nil)
      (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
      (setq org-log-done t)
      (setq org-clock-persist t)
      (setq org-file-apps
            '((auto-mode . emacs)
              ("\\.mm\\'" . system)
              ("\\.x?html?\\'" . "firefox %s")
              ("\\.pdf::\\([0-9]+\\)\\'" . "zathura \"%s\" -P %1")
              ("\\.pdf\\'" . "zathura \"%s\"")))
      (setq org-refile-targets (quote ((org-agenda-files :maxlevel . 4))))
      (setq org-agenda-span 'month)
      (setq org-agenda-custom-commands
            '(("h" agenda "120 days"
               ((org-agenda-show-all-dates nil)
                (org-agenda-span 120))
               )))
      (setq org-capture-templates
            '(("t" "Task" entry (file+headline "" "Tasks")
               "* TODO %?\n  %U\n  %a")
              ("s" "Song" table-line (file+headline "~/org/org.org" "Songs")
               "|%(format-current-song (get-current-song))|%U|%a|"
               :immediate-finish t)))
      (setq org-refile-allow-creating-parent-nodes 'confirm)
      (setq org-src-fontify-natively t)
      (setq org-use-speed-commands t)
      (setq org-clock-mode-line-total 'current)
      (org-clock-persistence-insinuate)
      (setq org-use-speed-commands t)
      (use-package org-habit)
      (org-load-modules-maybe t)
      (use-package cdlatex
        :ensure t
        :commands turn-on-org-cdlatex)
      (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
      (use-package ox-latex
        :config
        (add-to-list 'org-latex-classes
                     '("koma-article"
                       "\\documentclass[fontsize=12pt,a4paper]{scrartcl}\n\\usepackage[AUTO]{polyglossia}\n\\usepackage[utf8]{inputenc}[NO-PACKAGES]"
                       ("\\section{%s}" . "\\section*{%s}")
                       ("\\subsection{%s}" . "\\subsection*{%s}")
                       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                       ("\\paragraph{%s}" . "\\paragraph*{%s}")
                       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
        (add-to-list 'org-latex-classes
                     '("semproc"
                       "\\documentclass[a4paper,10pt,openright,parskip=half-]{semproc}\n[NO-DEFAULT-PACKAGES]\n[NO-PACKAGES]"
                       ("\\section{%s}" . "\\section*{%s}")
                       ("\\subsection{%s}" . "\\subsection*{%s}")
                       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                       ("\\paragraph{%s}" . "\\paragraph*{%s}")
                       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
        (add-to-list 'org-latex-classes
                     '("koma-report" "\\documentclass[fontsize=12pt,a4paper]{scrreprt}\n\\usepackage[AUTO]{polyglossia}\n\\usepackage[utf8]{inputenc}[NO-PACKAGES]"
                       ("\\chapter{%s}" . "\\chapter*{%s}")
                       ("\\section{%s}" . "\\section*{%s}")
                       ("\\subsection{%s}" . "\\subsection*{%s}")
                       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                       ("\\paragraph{%s}" . "\\paragraph*{%s}")
                       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
        (use-package org-inline-task
          :init
          (defun org-latex-format-inlinetask
              (todo _todo-type priority title tags contents info)
            (format "\\todo[inline]{\\textbf{%s}%s}" title contents))
          (setq org-latex-format-inlinetask-function 'org-latex-format-inlinetask))
        (setq org-latex-prefer-user-labels t)
        (use-package ox-bibtex)
        (use-package ox :config
          (setq org-export-default-language "de-de"))
        (setq org-latex-packages-alist '(("ngerman" "babel" nil)))
        (setq org-latex-default-packages-alist '(("" "fixltx2e" nil)
                                                 ("" "graphicx" t)
                                                 ("" "longtable" nil)
                                                 ("" "float" nil)
                                                 ("" "wrapfig" nil)
                                                 ("" "rotating" nil)
                                                 ("normalem" "ulem" t)
                                                 ("" "amsmath" t)
                                                 ("" "textcomp" t)
                                                 ("" "marvosym" t)
                                                 ("" "wasysym" t)
                                                 ("" "amssymb" t)
                                                 ("hyphens" "url" nil)
                                                 ("" "hyperref" nil)
                                                 "\\tolerance=1000"))
        (use-package org-bullets
          :init (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
        (setq org-highlight-latex-and-related '(latex script entities))
        (setq org-latex-toc-command "\\tableofcontents\n\\clearpage\n")
        (mapc (lambda (x) (setq org-format-latex-options (plist-put org-format-latex-options (car x) (cadr x))))
              '((:scale 2.0)
                (:foreground "Black")
                (:background "White")))
        (org-babel-do-load-languages
         'org-babel-load-languages
         '((emacs-lisp . t)
           (R . t))))))
#+end_src
* functions
#+begin_src emacs-lisp :tangle yes
  ;; comment out line if no region is selected
  (defun comment-dwim-line (&optional arg)
      "Replacement for the comment-dwim command.
      If no region is selected and current line is not blank and we are not at the end of the line,
      then comment current line.
      Replaces default behaviour of comment-dwim, when it inserts comment at the end of the line."
        (interactive "*P")
        (comment-normalize-vars)
        (if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
            (comment-or-uncomment-region (line-beginning-position) (line-end-position))
          (comment-dwim arg)))

  ;; functions to paste to http://sprunge.us using web.el
  (defun sprunge-buffer ()
    (interactive)
    (sprunge-region (point-min) (point-max)))
  (defun sprunge-region (start end)
    (interactive "r")
    (let ((buffer-contents (buffer-substring-no-properties start end))
          (query-data (make-hash-table :test 'equal)))
      (puthash 'sprunge buffer-contents query-data)
      (web-http-post
       (lambda (con header data)
         (kill-new (substring data 0 -1)))
       :url "http://sprunge.us"
       :data query-data)))
  (use-package web
    :commands (sprunge-region sprunge-buffer)
    :ensure t)
  (defun narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
  Dwim means: region, org-src-block, org-subtree, or defun,
  whichever applies first. Narrowing to org-src-block actually
  calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer is
  already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning) (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if you
           ;; don't want it.
           (cond ((ignore-errors (org-edit-src-code))
                  (delete-other-windows))
                 ((ignore-errors (org-narrow-to-block) t))
                 (t (org-narrow-to-subtree))))
          ((derived-mode-p 'latex-mode)
           (LaTeX-narrow-to-environment))
          (t (narrow-to-defun))))
  (bind-key "C-c n" 'narrow-or-widen-dwim)
#+end_src
* bindings
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "M-;") 'comment-dwim-line)
  ;; expand-region
  (pending-delete-mode t)
  (use-package expand-region
    :ensure t
    :commands (er/expand-region er/mark-defun))
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-x C-r") 'revert-buffer)

#+end_src
* ace
#+begin_src emacs-lisp :tangle yes
  (use-package ace-window
    :ensure t
    :bind ("M-ä" . ace-window))
  (use-package avy
    :ensure avy
    :bind (("C-ß" . avy-goto-char)
           ("C-ö" . avy-goto-word-1)
           ("C-ä" . avy-goto-char-2)))
#+end_src
* auctex
#+begin_src emacs-lisp :tangle yes
  (use-package tex
    :ensure auctex
    :mode ("\\.tex\\'" . LaTeX-mode)
    :config
    (setq TeX-view-program-list
          '(("zathura"
             ("zathura" (mode-io-correlate "-sync.sh")
              " "
              (mode-io-correlate "%n:1:%b ")
              "%o"))))
    (setq TeX-view-program-selection '((output-pdf "zathura")))
    (setq TeX-PDF-mode t)
    (TeX-source-correlate-mode)
    (use-package preview
      :config
      (set-face-attribute 'preview-reference-face nil
                          :background "white"
                          :foreground "black")
      (set-default 'preview-scale-function 1.2)))
#+end_src
* haskell
#+begin_src emacs-lisp :tangle yes
  (use-package shm
    :load-path "~/code/haskell/structured-haskell-mode/elisp/"
    :commands (structured-haskell-mode)
    :init
    (add-hook 'haskell-mode-hook 'structured-haskell-mode))
  (use-package intero
    :load-path "~/code/haskell/intero/elisp/"
    :commands (intero-mode)
    :init
    (add-hook 'haskell-mode-hook 'intero-mode))
  (use-package hindent
    :load-path "~/code/haskell/hindent/elisp"
    :commands (hindent-reformat-decl hindent-mode)
    :config (setq hindent-style "chris-done")
    :init
    (add-hook 'haskell-mode-hook 'hindent-mode))
  (use-package haskell-mode
    :load-path "~/code/haskell/haskell-mode/"
    :mode "\\.hs\\'"
    :config
    (progn
      (setq haskell-process-args-stack-ghci '("--ghc-options=\"-ferror-spans -fobject-code\"" "--test"))
      (use-package haskell)
      (use-package haskell-doc)
      (use-package haskell-decl-scan)
      (define-key haskell-mode-map (kbd "C-`") 'haskell-interactive-bring)
      (setq haskell-process-log t)
      (setq haskell-process-type 'stack-ghci)
      (define-key haskell-mode-map (kbd "C-c i") 'hindent-reformat-decl)
      ))
  (defun haskell-stack-pvp (pkgname)
    (interactive "sPackage name: ")
    (let* ((pkgver (with-temp-buffer
                     (call-process "stack" nil t nil "list-dependencies")
                     (goto-char (point-min))
                     (search-forward-regexp (concat pkgname " \\(\\([[:digit:]]+\.\\)+[[:digit:]]+\\)"))
                     (match-string 1))))
      (insert (haskell-pvpify pkgver))))
  (defun haskell-pvpify (pkgver)
    (let* ((splitted (split-string pkgver "\\."))
           (ver0 (nth 0 splitted))
           (ver1 (string-to-number (nth 1 splitted))))
      (message (format ">= %s.%d && < %s.%d" ver0 ver1 ver0 (+ ver1 1)))))
  (setq flycheck-hlint-ignore-rules '("Eta reduce" "Use String"))
#+end_src
* mu4e
#+begin_src emacs-lisp :tangle yes
  (use-package mu4e
    :load-path "/usr/share/emacs/site-lisp/mu4e"
    :commands mu4e
    :bind ("C-c m" . mu4e)
    :config
    (use-package mu4e-contrib)
    (if mail-on
        (progn
          (setq mu4e-html2text-command
                'mu4e-shr2text)
          (setq mu4e-context-policy 'pick-first)
          (setq mu4e-completing-read-function 'ivy-completing-read)
          (setq message-send-mail-function 'smtpmail-send-it)
          (setq mu4e-view-html-plaintext-ratio-heuristic 50)
          (setq mu4e-contexts
                (list (make-mu4e-context
                       :name "purelyfunctional"
                       :enter-func (lambda () (mu4e-message "Switch to the purelyfunctional context"))
                       :match-func (lambda (msg)
                                     (when msg
                                       (s-prefix? "/purelyfunctional/" (mu4e-message-field msg :maildir))))
                       :vars '((user-mail-address . "moritz.kiefer@purelyfunctional.org")
                               (mu4e-sent-folder . "/purelyfunctional/sent")
                               (mu4e-drafts-folder . "/purelyfunctional/drafts")
                               (mu4e-trash-folder . "/purelyfunctional/Trash")
                               (mu4e-sent-messages-behavior . sent)
                               (smtpmail-default-smtp-server . "cassiopeia.uberspace.de")
                               (smtpmail-smtp-server . "cassiopeia.uberspace.de")
                               (smtpmail-stream-type . starttls)
                               (smtpmail-smtp-service . 587)))
                      (make-mu4e-context
                       :name "gmail"
                       :enter-func (lambda () (mu4e-message "Switch to the gmail context"))
                       :match-func (lambda (msg)
                                     (when msg
                                       (s-prefix? "/gmail/" (mu4e-message-field msg :maildir))))
                       :vars '((user-mail-address . "moritz.kiefer@gmail.com")
                               (mu4e-sent-folder . "/gmail/sent")
                               (mu4e-drafts-folder . "/gmail/drafts")
                               (mu4e-trash-folder . "/gmail/trash")
                               (mu4e-sent-messages-behavior . delete)
                               (smtpmail-default-smtp-server . "smtp.gmail.com")
                               (smtpmail-smtp-server . "smtp.gmail.com")
                               (smtpmail-stream-type . starttls)
                               (smtpmail-smtp-service . 587)))
                      (make-mu4e-context
                       :name "holarse"
                       :enter-func (lambda () (mu4e-message "Switch to holarse context"))
                       :match-func (lambda (msg)
                                     (when
                                         msg (mu4e-message-contact-field-matches
                                              msg :to "javafant@holarse-linuxgaming.de")))
                       :vars '((user-mail-address . "javafant@holarse-linuxgaming.de")
                               (mu4e-sent-folder . "/holarse/sent")
                               (mu4e-drafts-folder . "/holarse/drafts")
                               (mu4e-sent-messages-behavior . sent)
                               (smtpmail-default-smtp-server . "asmtp.mail.hostpoint.ch")
                               (smtpmail-smtp-server . "asmtp.mail.hostpoint.ch")
                               (smtpmail-stream-type . starttls)
                               (smtpmail-smtp-service . 587)))))
          (setq mu4e-maildir "~/mail")
          (setq mu4e-get-mail-command "mbsync -a")
          (setq mu4e-update-interval 300)
          (setq mu4e-view-show-addresses t)
          (setq mu4e-headers-include-related t)
          (setq mu4e-headers-show-threads nil)
          (setq mu4e-headers-skip-duplicates t)
          (setq mu4e-split-view 'vertical)
          (setq
           user-full-name  "Moritz Kiefer"
           mu4e-compose-signature ""
           mu4e-compose-signature-auto-include nil
           mu4e-attachment-dir "~/downloads")
          (setq mu4e-maildir-shortcuts
                '(("/gmail/inbox"     . ?g)
                  ("/holarse/inbox"       . ?h)
                  ("/purelyfunctional/inbox" . ?p)))

          (setq mu4e-bookmarks '(("flag:unread AND NOT flag:trashed AND NOT maildir:/gmail/spam AND NOT maildir:/purelyfunctional/haskell AND NOT maildir:/purelyfunctional/github"
                                  "Unread messages"     ?u)
                                 ("date:today..now"                  "Today's messages"     ?t)
                                 ("date:7d..now"                     "Last 7 days"          ?w)
                                 ("mime:image/*"                     "Messages with images" ?p)
                                 ("maildir:/purelyfunctional/haskell" "haskell" ?h)))

          (add-hook 'mu4e-compose-mode-hook 'mml-secure-message-sign)
          (add-hook 'mu4e-view-mode-hook '(lambda ()
                                            (local-set-key (kbd "<end>") 'end-of-line)
                                            (local-set-key (kbd "<home>") 'beginning-of-line)))
          (when (fboundp 'imagemagick-register-types)
            (imagemagick-register-types))
          (add-to-list 'mu4e-view-actions
                       '("View in browser" . mu4e-action-view-in-browser) t)

          ;; don't keep message buffers around
          (setq message-kill-buffer-on-exit t))))
#+end_src
* indentation
#+begin_src emacs-lisp :tangle yes
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
#+end_src
* lisp
#+begin_src emacs-lisp :tangle yes
  (use-package lisp-mode
    :defer t
    :init
    (progn
      (use-package paredit
        :diminish paredit-mode
        :ensure t
        :commands enable-paredit-mode)
      (use-package elisp-slime-nav
        :diminish elisp-slime-nav-mode
        :ensure t
        :commands turn-on-elisp-slime-nav-mode)
      (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook eval-expression-minibuffer-setup-hook smtlib-mode-hook))
        (add-hook hook 'turn-on-elisp-slime-nav-mode)
        (add-hook hook 'enable-paredit-mode))
      (use-package eldoc
        :diminish eldoc-mode
        :commands turn-on-eldoc-mode
        :init
        (progn
          (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
          (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
          (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)))))
#+end_src
* flycheck
#+begin_src emacs-lisp :tangle yes
  (use-package flycheck
    :ensure t
    :defer 2
    :diminish flycheck-mode
    :init
    :config
    (global-flycheck-mode)
    (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-gcc flycheck-rtags))
    (setq flycheck-emacs-lisp-load-path 'inherit)
    (use-package flycheck-package
      :ensure t))
#+end_src
* browser
#+begin_src emacs-lisp :tangle yes
  (setq browse-url-browser-function 'browse-url-xdg-open)
#+end_src
* gdb
#+begin_src emacs-lisp :tangle yes
  (setq gdb-many-windows t)
#+end_src
* yasnippet
#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet
    :diminish yas-minor-mode
    :ensure t
    :defer 2
    :config
    (progn
      (setq yas-snippet-dirs '("~/code/emacs/snippets/custom" "~/code/emacs/snippets/yasnippet-snippets"))
      (yas-global-mode t)))
#+end_src
* symlinks
#+begin_src emacs-lisp :tangle yes
  (setq vc-follow-symlinks t)
#+end_src
* magit
#+begin_src emacs-lisp :tangle yes
  (add-hook 'magit-mode-hook 'magit-load-config-extensions)
#+end_src
* pkgbuild
#+begin_src emacs-lisp :tangle yes
  (use-package pkgbuild-mode
    :ensure t
    :mode "/PKGBULD$")
#+end_src
* abbrev
#+begin_src emacs-lisp :tangle yes
  (use-package abbrev
    :diminish abbrev-mode
    :config
    (progn (abbrev-mode)
           (setq abbrev-file-name "~/.emacs.d/abbrev_defs")))
#+end_src
* ediff
#+begin_src emacs-lisp :tangle yes
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (setq ediff-split-window-function 'split-window-horizontally)
#+end_src
* reveal
#+begin_src emacs-lisp :tangle yes
  (setq org-reveal-root "file:///home/moritz/code/web/reveal.js/")
  (setq org-reveal-title-slide-template
        "<h1>%t</h1>
         <h2>%a</h2>
         <h2>%d</h2>")
#+end_src
* impress
#+begin_src emacs-lisp :tangle yes
  (setq org-impress-js-javascript "/home/moritz/code/web/impress.js/js/impress.js")
  (setq org-impress-js-stylesheet "/home/moritz/code/web/impress.js/css/impress-demo.css")
#+end_src
* idris
#+begin_src emacs-lisp :tangle yes
  (use-package idris-mode
    :load-path "~/code/idris/idris-mode"
    :mode "\\.idr\\'"
    :init (use-package prop-menu
            :ensure t))
#+end_src
* gpgfix
#+begin_src emacs-lisp :tangle yes
  (defun epg--list-keys-1 (context name mode)
    (let ((args (append (if (epg-context-home-directory context)
                            (list "--homedir"
                                  (epg-context-home-directory context)))
                        '("--with-colons" "--no-greeting" "--batch"
                          "--with-fingerprint" "--with-fingerprint")
                        (unless (eq (epg-context-protocol context) 'CMS)
                          '("--fixed-list-mode"))))
          (list-keys-option (if (memq mode '(t secret))
                                "--list-secret-keys"
                              (if (memq mode '(nil public))
                                  "--list-keys"
                                "--list-sigs")))
          (coding-system-for-read 'binary)
          keys string field index)
      (if name
          (progn
            (unless (listp name)
              (setq name (list name)))
            (while name
              (setq args (append args (list list-keys-option (car name)))
                    name (cdr name))))
        (setq args (append args (list list-keys-option))))
      (with-temp-buffer
        (apply #'call-process
               (epg-context-program context)
               nil (list t nil) nil args)
        (goto-char (point-min))
        (while (re-search-forward "^[a-z][a-z][a-z]:.*" nil t)
          (setq keys (cons (make-vector 15 nil) keys)
                string (match-string 0)
                index 0
                field 0)
          (while (and (< field (length (car keys)))
                      (eq index
                          (string-match "\\([^:]+\\)?:" string index)))
            (setq index (match-end 0))
            (aset (car keys) field (match-string 1 string))
            (setq field (1+ field))))
        (nreverse keys))))
#+end_src
* hydra
#+begin_src emacs-lisp :tangle yes
  (use-package hydra
    :ensure t)
  (global-set-key
   (kbd "M-ö")
   (defhydra hydra-window (:color amaranth)
     "window"
     ("n" windmove-left)
     ("r" windmove-down)
     ("t" windmove-up)
     ("d" windmove-right)
     ("v" (lambda ()
            (interactive)
            (split-window-right)
            (windmove-right))
      "vert")
     ("x" (lambda ()
            (interactive)
            (split-window-below)
            (windmove-down))
      "horz")
     ;; ("t" transpose-frame "'")
     ("o" delete-other-windows "one" :color blue)
     ("a" ace-window "ace")
     ("s" ace-swap-window "swap")
     ("k" ace-delete-window "del")
     ("i" ace-maximize-window "ace-one" :color blue)
     ("b" ivy-switch-buffer "buf")
     ("f" counsel-find-file "file")
     ;; ("m" headlong-bookmark-jump "bmk")
     ("q" nil "cancel")))
  (defhydra hydra-zoom (global-map "<f2>")
    "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out")
    ("0" text-scale-adjust "reset"))
  (defhydra hydra-error (global-map "M-g")
    "goto-error"
    ("h" first-error "first")
    ("j" next-error "next")
    ("k" previous-error "prev")
    ("v" recenter-top-bottom "recenter")
    ("q" nil "quit"))
  (use-package windmove)
  (defun hydra-move-splitter-left (arg)
    "Move window splitter left."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (shrink-window-horizontally arg)
      (enlarge-window-horizontally arg)))
  (defun hydra-move-splitter-right (arg)
    "Move window splitter right."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (enlarge-window-horizontally arg)
      (shrink-window-horizontally arg)))
  (defun hydra-move-splitter-up (arg)
    "Move window splitter up."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (enlarge-window arg)
      (shrink-window arg)))
  (defun hydra-move-splitter-down (arg)
    "Move window splitter down."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (shrink-window arg)
      (enlarge-window arg)))
  (global-set-key
   (kbd "M-ü")
   (defhydra hydra-splitter ()
     "splitter"
     ("n" hydra-move-splitter-left)
     ("r" hydra-move-splitter-down)
     ("t" hydra-move-splitter-up)
     ("d" hydra-move-splitter-right)
     ("q" nil "quit")))
  (use-package volume
    :commands (volume-lower volume-raise)
    :ensure t)
  (bind-key*
   "C-c v"
   (defhydra hydra-volume (:color amaranth)
     ("d" (volume-lower 5))
     ("u" (volume-raise 5))
     ("n" volume-raise)
     ("p" volume-lower)
     ("q" nil "quit")))
  (bind-key
   "C-="
   (defhydra hydra-mark (:hint nil)
     "
  ^Structure^      ^Pairs^              ^Misc^
  ^^^^^^^^-------------------------------------------
  _SPC_: region    _P_: inside pairs    _u_: url
  _d_: defun       _p_: outside pairs   _m_: email
  _c_: comment     _Q_: inside quotes   _s_: symbol
  _._: sentence    _q_: outside quotes
  _h_: paragraph
  "
     ("SPC" er/expand-region)
     ("P" er/mark-inside-pairs)
     ("Q" er/mark-inside-quotes)
     ("p" er/mark-outside-pairs)
     ("q" er/mark-outside-quotes)
     ("d" er/mark-defun)
     ("c" er/mark-comment)
     ("." er/mark-text-sentence)
     ("h" er/mark-text-paragraph)
     ("w" er/mark-word)
     ("u" er/mark-url)
     ("m" er/mark-email)
     ("s" er/mark-symbol)))
#+end_src
* github
#+begin_src emacs-lisp :tangle yes
  (use-package github
    :disabled t
    :commands github-issues-mode
    :load-path "~/code/emacs/github")
#+end_src
* guide-key
#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :ensure t
    :config
      (which-key-mode))
#+end_src
* multiple cursors
#+begin_src emacs-lisp :tangle yes
  (use-package multiple-cursors
    :ensure t
    :bind
    ("C->" . hydra-multiple-cursors/body)
    :init
    (defhydra hydra-multiple-cursors (:hint nil)
    "
       ^Up^            ^Down^        ^Other^
  ----------------------------------------------
  [_p_]   Next    [_n_]   Next    [_l_] Edit lines
  [_P_]   Skip    [_N_]   Skip    [_a_] Mark all
  [_M-p_] Unmark  [_M-n_] Unmark  [_r_] Mark by regexp
  ^ ^             ^ ^             [_q_] Quit
  "
    ("l" mc/edit-lines :exit t)
    ("a" mc/mark-all-like-this :exit t)
    ("n" mc/mark-next-like-this)
    ("N" mc/skip-to-next-like-this)
    ("M-n" mc/unmark-next-like-this)
    ("p" mc/mark-previous-like-this)
    ("P" mc/skip-to-previous-like-this)
    ("M-p" mc/unmark-previous-like-this)
    ("r" mc/mark-all-in-region-regexp :exit t)
    ("q" nil)))
#+end_src
* markdown
#+begin_src emacs-lisp :tangle yes
  (use-package markdown-mode
    :mode "\\.md\\'"
    :ensure t)
#+end_src
* unbound
#+begin_src emacs-lisp :tangle yes
  (use-package unbound
    :commands describe-unbound-keys
    :ensure t)
#+end_src
* holidays
#+begin_src emacs-lisp :tangle yes
  (setq holiday-general-holidays
        '((holiday-fixed 1 1 "Neujahr")
          (holiday-fixed 5 1 "Tag der Arbeit")
          (holiday-fixed 10 3 "Tag der deutschen Einheit")))
  (setq holiday-christian-holidays
        '((holiday-fixed 12 25 "1. Weihnachtstag")
          (holiday-fixed 12 26 "2. Weihnachtstag")
          (holiday-fixed 1 6 "Heilige 3 Könige")
          (holiday-fixed 11 1 "Allerheiligen")
          ;; Date of Easter calculation taken from holidays.el.
          (let* ((century (1+ (/ displayed-year 100)))
                 (shifted-epact (% (+ 14 (* 11 (% displayed-year 19))
                                      (- (/ (* 3 century) 4))
                                      (/ (+ 5 (* 8 century)) 25)
                                      (* 30 century))
                                   30))
                 (adjusted-epact (if (or (= shifted-epact 0)
                                         (and (= shifted-epact 1)
                                              (< 10 (% displayed-year 19))))
                                     (1+ shifted-epact)
                                   shifted-epact))
                 (paschal-moon (- (calendar-absolute-from-gregorian
                                   (list 4 19 displayed-year))
                                  adjusted-epact))
                 (easter (calendar-dayname-on-or-before 0 (+ paschal-moon 7))))
            (holiday-filter-visible-calendar
             (mapcar
              (lambda (l)
                (list (calendar-gregorian-from-absolute (+ easter (car l)))
                      (nth 1 l)))
              '(( -2 "Karfreitag")
                (  0 "Ostersonntag")
                ( +1 "Ostermontag")
                (+39 "Christi Himmelfahrt")
                (+49 "Pfingstsonntag")
                (+50 "Pfingstmontag")
                (+60 "Fronleichnam")))))))
  (setq calendar-holidays (append holiday-general-holidays holiday-christian-holidays))
#+end_src
* ledger
#+begin_src emacs-lisp :tangle yes
  (use-package ledger-mode
    :ensure t
    :mode "\\.ledger\\'"
    :config
    (setq ledger-reconcile-default-commodity "€"))
#+end_src
* proofgeneral
#+begin_src emacs-lisp :tangle yes
  (use-package proof-site
    :load-path ("~/code/emacs/PG/coq" "~/code/emacs/PG/generic")
    :mode ("\\.v\\'" . coq-mode)
    :config (add-hook 'coq-mode-hook #'company-coq-mode)
    :init
    (add-hook 'coq-mode-hook
              (lambda ()
                (make-local-variable 'face-remapping-alist)
                (setq face-remapping-alist
                      '((font-lock-comment-face . font-lock-doc-face)))))
    (setq proof-splash-enable nil)
    (use-package company-coq
      :ensure t
      :commands company-coq-mode))
#+end_src
* json
#+begin_src emacs-lisp :tangle yes
  (use-package json-mode
    :mode "\\.json\\'"
    :ensure t)
#+end_src
* web
#+begin_src emacs-lisp :tangle yes
  (use-package web-mode
    :ensure t
    :mode ("\\.html\\'"
           "\\.js\\'"
           "\\.css\\'"
           "\\.jsx\\'"
           "\\.php\\'")
    :config
    (setq-default web-mode-markup-indent-offset 2))
#+end_src
* yaml
#+begin_src emacs-lisp :tangle yes
  (use-package yaml-mode
    :mode "\\.yaml\\'"
    :ensure t)
#+end_src
* nginx
#+begin_src emacs-lisp :tangle yes
  (use-package nginx-mode
    :mode "\\.nginx\\'"
    :ensure t)
#+end_src
* nyan
#+begin_src emacs-lisp :tangle yes
  (use-package nyan-mode
    :defer 10
    :ensure t
    :pin melpa-stable
    :config (nyan-mode))
#+end_src
* c/c++
#+begin_src emacs-lisp :tangle yes
  (setq c-basic-offset 4)
  (use-package cc-mode
    :mode (("\\.cpp\\'" . c++-mode)
           ("\\.c\\'" . c-mode))
    :init
    (defun remap-fill-paragraph () (define-key c++-mode-map [remap c-fill-paragraph] #'clang-format-buffer))
    (use-package cc-mode
    :mode ("\\.cpp\\'" . c++-mode)
    :init
    (defun remap-fill-paragraph-c () (define-key c-mode-map [remap c-fill-paragraph] #'clang-format-buffer))
    (add-hook 'c++-mode-hook 'remap-fill-paragraph)
    (add-hook 'c-mode-hook 'remap-fill-paragraph-c)
    :config
    (use-package rtags
      :load-path "~/code/rtags/src"
      :bind (:map c-mode-base-map ("C-c r t" . rtags-symbol-type))
      :demand t
      :config
      (setq rtags-path "~/code/rtags/build/bin")
      (rtags-enable-standard-keybindings)
      (setq rtags-autostart-diagnostics nil)
      (setq rtags-completions-enabled t)
      (require 'flycheck-rtags)
      )
    (use-package clang-format
      :ensure t))
    (add-hook 'c++-mode-hook 'remap-fill-paragraph)
    :config
    (use-package rtags
      :load-path "~/code/rtags/src"
      :bind (:map c-mode-base-map ("C-c r t" . rtags-symbol-type))
      :demand t
      :config
      (setq rtags-path "~/code/rtags/build/bin")
      (rtags-enable-standard-keybindings)
      (setq rtags-autostart-diagnostics nil)
      (setq rtags-completions-enabled t)
      (require 'flycheck-rtags)
      )
    (use-package clang-format
      :ensure t))
#+end_src
* rust
#+begin_src emacs-lisp :tangle yes
  (use-package rust-mode
    :mode "\\.rs\\'"
    :ensure t)
#+end_src
* toml
#+begin_src emacs-lisp :tangle yes
  (use-package toml-mode
    :mode "\\.toml\\'"
    :ensure t)
#+end_src
* sml
#+begin_src emacs-lisp :tangle yes
    (use-package sml-mode
      :ensure t
      :mode ("\\.fun\\'" "\\.sig\\'" "\\.sml\\'"))
#+end_src
* ocaml
#+begin_src emacs-lisp :tangle yes
  (use-package tuareg
    :commands tuareg-run-ocaml
    :disabled t
    :ensure t)
#+end_src
* llvm
#+begin_src emacs-lisp :tangle yes
  (use-package llvm-mode
    :mode "\\.ll\\'"
    :ensure t)
#+end_src
* jonprl
#+begin_src emacs-lisp :tangle yes
  (use-package jonprl-mode
    :mode "\\.jonprl\\'"
    :ensure t)
#+end_src
* gnuplot
#+begin_src emacs-lisp :tangle yes
  (use-package gnuplot
    :commands gnuplot-mode
    :defer t
    :ensure t)
#+end_src
* cmake
#+begin_src emacs-lisp :tangle yes
  (use-package cmake-mode
    :ensure t
    :mode "CMakeLists\\.txt\\'")
#+end_src
* docker
#+begin_src emacs-lisp :tangle yes
  (use-package dockerfile-mode
    :mode "Dockerfile\\'"
    :ensure t)
#+end_src
* smtlib
#+begin_src emacs-lisp :tangle yes
  (use-package smtlib
     :load-path "~/code/emacs/smtlib-mode"
     :mode ("\\.smt2" . smtlib-mode))
#+end_src
* pdf-tools
#+begin_src emacs-lisp :tangle yes
  (use-package pdf-tools
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :ensure t
    :config (use-package org-pdfview
              :load-path "~/code/emacs/org-pdfview")
    :init (add-hook 'pdf-view-mode-hook 'pdf-view-fit-page-to-window))
#+end_src
* lean
#+begin_src emacs-lisp :tangle yes
  (use-package dash
    :defer t
    :ensure t)
  (use-package dash-functional
    :defer t
    :ensure t)
  (use-package f
    :defer t
    :ensure t)
  (use-package lua-mode
    :defer t
    :ensure t)
  (use-package mmm-mode
    :defer t
    :ensure t)
  (use-package lean-mode
    :mode ("\\.lean\\'" "\\.hlean\\'")
    :load-path "~/code/lean/src/emacs"
    :init (setq lean-rootdir "~/code/lean/"))
#+end_src
* scala
#+begin_src emacs-lisp :tangle yes
  (use-package ensime
    :ensure t
    :commands (ensime-scala-mode-hook))
  (use-package scala-mode2
    :ensure t
    :mode ("\\.scala\\'" . scala-mode)
    :config (add-hook 'scala-mode-hook 'ensime-scala-mode-hook))
#+end_src
* rainbow
#+begin_src emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :ensure t
    :commands rainbow-delimiters-mode
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src
* tramp
#+begin_src emacs-lisp :tangle yes
  (setq tramp-default-method "ssh")
#+end_src
* keyfreq
#+begin_src emacs-lisp :tangle yes
  (use-package keyfreq
    :ensure t
    :config
    (setq keyfreq-excluded-commands
        '(self-insert-command
          previous-line
          next-line
          mu4e~headers-jump-to-maildir
          mwheel-scroll
          mouse-drag-region
          mouse-set-point
          left-char
          ivy-done
          kill-line
          save-buffers
          mu4e-headers-search-bookmark))
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+end_src
* systemd
#+begin_src emacs-lisp :tangle yes
  (use-package systemd
    :ensure t
    :mode "\\.socket\\'")
#+end_src
* writeroom
#+begin_src emacs-lisp :tangle yes
  (use-package writeroom-mode
    :ensure t
    :commands writeroom-mode
    :config (defun my-writeroom-theme (arg)
              (cond
               ((= arg 1)
                (enable-theme 'leuven))
               ((= arg -1)
                (disable-theme 'leuven)
                (smart-mode-line-enable))))
    (add-to-list 'writeroom-global-effects 'my-writeroom-theme)
    (add-to-list 'writeroom-global-effects 'visual-line-mode))
#+end_src
* purescript
#+begin_src emacs-lisp :tangle yes

#+end_src
* bison
#+BEGIN_SRC elisp
  (use-package bison-mode
    :ensure t)
#+END_SRC

* packages
#+begin_src emacs-lisp :tangle yes
  (package-initialize nil)
  (add-to-list 'package-archives
               '("marmalade" . "http://marmalade-repo.org/packages/"))
  (add-to-list 'package-archives
               '("melpa-stable" . "http://stable.melpa.org/packages/"))
  (add-to-list 'package-archives
               '("org" . "http://orgmode.org/elpa/"))
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq use-package-verbose t)
  (require 'use-package)
  (setq load-prefer-newer t)
#+end_src
* secrets
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'load-path "~/.emacs.d/notsynced")
  (require 'secret)
#+end_src
* paradox
#+begin_src emacs-lisp :tangle yes
  (use-package paradox
    :ensure t
    :config
    (progn
      (setq paradox-execute-asynchronously t)
      (setq paradox-automatically-star t)))
#+end_src
* nix
#+begin_src emacs-lisp :tangle yes
  (use-package nix-mode)
#+end_src
* elnode
#+begin_src emacs-lisp :tangle yes
  (use-package elnode
    :ensure t
    :commands elnode-start)
#+end_src
* pos-tip
#+begin_src emacs-lisp :tangle yes
  (use-package pos-tip
    :ensure t
    :config
    (setq pos-tip-background-color "#4e4e4e")
    (setq pos-tip-foreground-color "#5fafd7"))
#+end_src
* misc
#+begin_src emacs-lisp :tangle yes
  (setq save-interprogram-paste-before-kill t)
  (setq ag-highlight-search t)
  (use-package undo-tree
    :ensure t
    :init (global-undo-tree-mode)
    :diminish undo-tree-mode)
  (global-undo-tree-mode)
  (setq show-paren-style 'paranthesis)
  (add-to-list 'auto-mode-alist '("\\.zsh\\'" . sh-mode))
  (winner-mode 1)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
* company
#+begin_src emacs-lisp :tangle yes
  (use-package company
    :ensure t
    :diminish company-mode
    :idle
    (global-company-mode t)
    :idle-priority 3)
  (use-package company-quickhelp
    :ensure t
    :idle
    (company-quickhelp-mode 1)
    :idle-priority 5)
  (use-package company-cmake
    :ensure t)
#+end_src
* dired
#+begin_src emacs-lisp :tangle yes
  (use-package dired
    :commands dired-mode
    :config
    (progn
      (setq dired-dwim-target t)
      (setq-default dired-omit-mode t)
      (bind-key  "C-o" 'dired-omit-mode dired-mode-map)
      (setq-default dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^\\.")))
#+end_src

* helm
#+begin_src emacs-lisp :tangle yes
  (use-package helm-config
    :diminish helm-mode
    :demand t
    :ensure helm
    :bind (("C-c h" . helm-command-prefix)
           ("M-x" . helm-M-x)
           ("C-x b" . helm-mini)
           ("C-x C-f" . helm-find-files)
           ("C-h SPC" . helm-all-mark-rings)
           ("M-y" . helm-show-kill-ring))
    :config
    (progn
      (use-package helm-eshell)
      (use-package helm-files)
      (use-package helm-grep)
      (use-package helm-ls-git)
      (use-package helm-descbinds
        :ensure t
        :config (bind-key "d" 'helm-descbinds helm-command-map))
      (bind-key "<tab>" 'helm-execute-persistent-action helm-map)
      ;; make tab work in terminal
      (bind-key "C-i" 'helm-execute-persistent-action helm-map)
      (bind-key "C-z" 'helm-select-action helm-map)
      (setq helm-man-or-woman-function 'woman
            helm-google-suggest-use-curl-p t
            helm-quick-update t
            helm-idle-delay 0.01
            helm-input-idle-delay 0.01
            helm-split-window-in-side-p t
            helm-scroll-amount 4)
      (helm-mode)))
  (use-package helm-ag
    :ensure t)
#+end_src
* projectile
#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :ensure t
    :diminish magit-auto-revert-mode
    :commands magit-status
    :config   (use-package magit-svn
                :ensure t))
  (use-package projectile
    :ensure t
    :defer t
    :init
    (projectile-global-mode t)
    (setq projectile-completion-system 'helm)
    :config
    (use-package helm-projectile
      :ensure t
      :config (helm-projectile-on)))
#+end_src
* gui
#+begin_src emacs-lisp :tangle yes
  (setq inhibit-splash-screen t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (column-number-mode t)
  (use-package moe-theme
    :ensure t
    :config
    (progn
      (moe-dark)
      (use-package smart-mode-line
        :ensure t
        :config
        (progn
          (setq sml/no-confirm-load-theme t)
          (setq sml/theme 'dark)
          (if (daemonp)
              (add-hook 'after-make-frame-functions
                        (lambda (frame)
                          (sml/setup)))
            (sml/setup))))))

  ;; show-paren-mode
  (setq show-paren-delay 0)
  (show-paren-mode t)
#+end_src
* org
#+begin_src emacs-lisp :tangle yes
  (use-package libmpdee
    :ensure t)
  (defun get-current-song ()
    (let* ((mpd-conn (mpd-conn-new "localhost" 6600))
           (mpd-status (mpd-get-status mpd-conn)))
      (if (and mpd-status (eq 'play (plist-get mpd-status 'state)))
          (let* ((song (car (mpd-get-songs mpd-conn "currentsong")))
                 (title (plist-get song 'Title))
                 (album (plist-get song 'Album))
                 (artist (plist-get song 'Artist)))
            `(title ,title artist ,artist album ,album))
        (get-spotify-song))))
  (defun format-current-song (song)
    (let ((title (plist-get song 'title))
          (artist (plist-get song 'artist))
          (album (plist-get song 'album)))
      (format "%s|%s|%s" title artist album)))
  (defun get-spotify-song ()
    (with-temp-buffer
      (call-process "dbus-send"
                    nil
                    t
                    t
                    "--print-reply"
                    "--session"
                    "--dest=org.mpris.MediaPlayer2.spotify"
                    "/org/mpris/MediaPlayer2"
                    "org.freedesktop.DBus.Properties.Get"
                    "string:org.mpris.MediaPlayer2.Player"
                    "string:Metadata")
      (beginning-of-buffer)
      (let ((album
             (progn
               (search-forward-regexp "album\"\n.*string \"\\\(.*\\\)\"")
               (match-string 1)))
            (artist
             (progn
               (search-forward-regexp "artist\"\n.*\n.*string \"\\\(.*\\\)\"")
               (match-string 1)))
            (title
             (progn
               (search-forward-regexp "title\"\n.*string \"\\\(.*\\\)\"")
               (match-string 1))))
        `(title ,title artist ,artist album ,album))))
  (use-package org
    :ensure org-plus-contrib
    :commands org-mode
    :bind (("C-c l" . org-store-link)
           ("C-c c" . org-capture)
           ("C-c a" . org-agenda)
           ("C-c b" . org-iswitchb)
           ("C-c C-w" . org-refile)
           ("C-c j" . org-clock-goto)
           ("C-c C-x C-o" . org-clock-out))
    :init
    (progn
      (setq org-directory "~/org")
      (setq org-agenda-files '("~/org"))
      (setq org-mobile-directory "~/org/mobile")
      (setq org-default-notes-file (concat org-directory "/notes.org"))
      (setq org-log-done t)
      (setq org-clock-persist t)
          (setq org-file-apps
            '((auto-mode . emacs)
              ("\\.mm\\'" . system)
              ("\\.x?html?\\'" . "firefox %s")
              ("\\.pdf::\\([0-9]+\\)\\'" . "zathura \"%s\" -P %1")
              ("\\.pdf\\'" . "zathura \"%s\"")))
      (setq org-refile-targets (quote ((org-agenda-files :maxlevel . 4))))
      (setq org-agenda-span 'month)
      (setq org-agenda-custom-commands
            '(("h" agenda "120 days"
               ((org-agenda-show-all-dates nil)
                (org-agenda-span 120))
               )))
      (setq org-capture-templates
            '(("t" "Task" entry (file+headline "" "Tasks")
               "* TODO %?\n  %U\n  %a")
              ("s" "Song" table-line (file+headline "~/org/org.org" "Songs")
               "|%(format-current-song (get-current-song))|%U|%a|"
               :immediate-finish t)))
      (setq org-refile-allow-creating-parent-nodes 'confirm)
      (setq org-src-fontify-natively t)
      (setq org-use-speed-commands t)
      (setq org-clock-mode-line-total 'current))
    :config
    (progn
      (org-clock-persistence-insinuate)
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((R . t)))
          (setq org-use-speed-commands t)
      (add-to-list 'org-modules 'org-habit)
      (org-load-modules-maybe t)
      (use-package cdlatex
        :ensure t
        :commands turn-on-org-cdlatex)
      (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
      (use-package ox-latex
        :defer t
        :config
        (add-to-list 'org-latex-classes
                     '("koma-article"
                       "\\documentclass{scrartcl}"
                       ("\\section{%s}" . "\\section*{%s}")
                       ("\\subsection{%s}" . "\\subsection*{%s}")
                       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                       ("\\paragraph{%s}" . "\\paragraph*{%s}")
                       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
        (use-package ox-bibtex)
        (use-package ox :config
          :defer t
          (setq org-export-default-language "de-de"))
        (setq org-latex-packages-alist '(("ngerman" "babel" nil)))
        (setq org-latex-default-packages-alist '(("AUTO" "inputenc" t)
                                                 ("T1" "fontenc" t)
                                                 ("" "fixltx2e" nil)
                                                 ("" "graphicx" t)
                                                 ("" "longtable" nil)
                                                 ("" "float" nil)
                                                 ("" "wrapfig" nil)
                                                 ("" "rotating" nil)
                                                 ("normalem" "ulem" t)
                                                 ("" "amsmath" t)
                                                 ("" "textcomp" t)
                                                 ("" "marvosym" t)
                                                 ("" "wasysym" t)
                                                 ("" "amssymb" t)
                                                 ("hyphens" "url" nil)
                                                 ("" "hyperref" nil)
                                                 "\\tolerance=1000"))

        (setq org-highlight-latex-and-related '(latex script entities))
        (setq org-latex-toc-command "\\tableofcontents\n\\clearpage\n")
        (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0)))))
#+end_src
* functions
#+begin_src emacs-lisp :tangle yes
  ;; comment out line if no region is selected
  (defun comment-dwim-line (&optional arg)
      "Replacement for the comment-dwim command.
      If no region is selected and current line is not blank and we are not at the end of the line,
      then comment current line.
      Replaces default behaviour of comment-dwim, when it inserts comment at the end of the line."
        (interactive "*P")
        (comment-normalize-vars)
        (if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
            (comment-or-uncomment-region (line-beginning-position) (line-end-position))
          (comment-dwim arg)))

  ;; functions to paste to http://sprunge.us using web.el
  (use-package web
    :ensure t)
  (defun sprunge-region (start end)
    (interactive "r")
    (let ((buffer-contents (buffer-substring-no-properties start end))
               (query-data (make-hash-table :test 'equal)))
            (puthash 'sprunge buffer-contents query-data)
        (web-http-post
         (lambda (con header data)
           (kill-new (substring data 0 -1)))
         :url "http://sprunge.us"
         :data query-data)))
  (defun sprunge-buffer ()
    (interactive)
    (sprunge-region (point-min) (point-max)))
#+end_src
* bindings
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "M-;") 'comment-dwim-line)
  ;; expand-region
  (pending-delete-mode t)
  (use-package expand-region
    :ensure t
    :bind (("C-=" . er/expand-region)))
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-x C-r") 'revert-buffer)

#+end_src
* ace
#+begin_src emacs-lisp :tangle yes
  (use-package ace-window
    :ensure t
    :bind ("M-ä" . ace-window))
  (use-package ace-jump-mode
    :ensure t
    :bind ("C-ß" . ace-jump-mode)
    :config
    (setq ace-jump-mode-submode-list
          '(ace-jump-char-mode
            ace-jump-word-mode
            ace-jump-line-mode)))
  (use-package ace-isearch
    :ensure t
    :config
    (global-ace-isearch-mode))
#+end_src
* auctex
#+begin_src emacs-lisp :tangle yes
  (use-package tex
    :ensure auctex
    :commands latex-mode
    :config
    (use-package latex
      :config
      (progn
        (setq TeX-view-program-list
              '(("zathura"
                 ("zathura" (mode-io-correlate "-sync.sh")
                  " "
                  (mode-io-correlate "%n:1:%b ")
                  "%o"))))
        (setq TeX-view-program-selection '((output-pdf "zathura")))
        (set-default 'preview-scale-function 1.2)
        (add-hook 'LaTeX-mode-hook (lambda () (TeX-global-PDF-mode t)))
        (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
        (add-to-list 'LaTeX-verbatim-environments "comment")
        (add-to-list 'TeX-command-list
                     '("Glossary" "makeglossaries %s" TeX-run-command nil
                       (latex-mode) :help "Create glossaries")))))

#+end_src
* haskell
#+begin_src emacs-lisp :tangle yes
  (use-package haskell-mode
    :ensure t
    :mode "\\.l?hs\\'"
    :init (progn
      (add-hook 'haskell-mode-hook 'structured-haskell-mode)
      (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
      (add-hook 'haskell-mode-hook 'hindent-mode)
      (add-hook 'haskell-interactive-mode-hook 'structured-haskell-repl-mode))
    :config
    (progn
      (setq haskell-process-args-cabal-repl '("--ghc-option=-ferror-spans" "--with-ghc=ghci-ng"))
      (define-key haskell-mode-map (kbd "C-`") 'haskell-interactive-bring)
      (setq haskell-process-log t)
      (setq haskell-interactive-mode-eval-mode 'haskell-mode)
      (use-package shm)
      (use-package hindent
        :config (setq hindent-style "chris-done"))
      (use-package shm-case-split)
      (define-key haskell-mode-map (kbd "C-c i") 'hindent/reformat-decl)
      (define-key shm-map (kbd "C-c C-s") 'shm/case-split)
      (use-package haskell
        :config (progn
                  (bind-key  "M-." 'haskell-mode-goto-loc interactive-haskell-mode-map)
                  (bind-key "C-c C-t" 'haskell-mode-show-type-at interactive-haskell-mode-map)
                  (bind-key "C-?" 'haskell-mode-find-uses interactive-haskell-mode-map)))
      (setq haskell-process-wrapper-function
            (lambda
              (argv)
              (append
               (list "nix-shell" "-I" "." "--command")
               (list
                (mapconcat
                 (quote identity)
                 argv " ")))))))
#+end_src
* mu4e
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'load-path "~/code/emacs/mu/mu4e")
  (require 'mu4e)
  (require 'org-mu4e)
  (require 'mu4e-contrib)
  (if mail-on
      (progn
        (setq mu4e-mu-binary "~/code/emacs/mu/mu/mu")
        (setq mu4e-html2text-command
              'mu4e-shr2text)
        (setq mu4e-maildir "~/mail")
        (setq mu4e-drafts-folder "/gmail/drafts")
        (setq mu4e-sent-folder   "/gmail/sent")
        (setq mu4e-trash-folder  "/gmail/trash")
        (setq mu4e-get-mail-command "mbsync -a")
        (setq mu4e-update-interval 300)
        (setq mu4e-view-show-addresses t)
        (setq mu4e-headers-include-related t)
        (setq mu4e-headers-show-threads nil)
        (setq mu4e-headers-skip-duplicates t)
        (setq mu4e-split-view 'vertical)
        (setq mu4e-compose-dont-reply-to-self t)
        (setq mu4e-compose-keep-self-cc nil)
        (setq
         user-mail-address (cadr mu4e-user-mail-address-list)
         user-full-name  "Moritz Kiefer"
         mu4e-compose-signature ""
         mu4e-compose-signature-auto-include nil)
        (setq mu4e-attachment-dir "~/downloads")

        (setq   mu4e-maildir-shortcuts
                '(("/gmail/inbox"     . ?g)
                  ("/holarse/inbox"       . ?h)
                  ("/purelyfunctional/inbox" . ?p)))

        (setq message-send-mail-function 'smtpmail-send-it
              smtpmail-stream-type 'starttls
              smtpmail-default-smtp-server "smtp.gmail.com"
              smtpmail-smtp-server "smtp.gmail.com"
              smtpmail-smtp-service 587)

        (defvar mu4e-account-alist
          `(("gmail"
             (mu4e-sent-folder "/gmail/sent")
             (mu4e-drafts-folder "/gmail/drafts")
             (mu4e-trash-folder "/gmail/trash")
             (mu4e-sent-messages-behavior delete)
             (user-mail-address ,(car mu4e-user-mail-address-list))
             (smtpmail-default-smtp-server "smtp.gmail.com")
             (smtpmail-smtp-server "smtp.gmail.com")
             (smtpmail-stream-type starttls)
             (smtpmail-smtp-service 587))
            ("holarse"
             (mu4e-sent-folder "/holarse/sent")
             (mu4e-drafts-folder "/holarse/drafts")
             (mu4e-sent-messages-behavior sent)
             (user-mail-address ,(cddr mu4e-user-mail-address-list))
             (smtpmail-default-smtp-server "asmtp.mail.hostpoint.ch")
             (smtpmail-smtp-server "asmtp.mail.hostpoint.ch")
             (smtpmail-stream-type starttls)
             (smtpmail-smtp-service 587))
            ("purelyfunctional"
             (mu4e-sent-folder "/purelyfunctional/sent")
             (mu4e-drafts-folder "/purelyfunctional/drafts")
             (mu4e-sent-messages-behavior sent)
             (user-mail-address ,(cadr mu4e-user-mail-address-list))
             (smtpmail-default-smtp-server "cassiopeia.uberspace.de")
             (smtpmail-smtp-server "cassiopeia.uberspace.de")
             (smtpmail-stream-type starttls)
             (smtpmail-smtp-service 587))))

        (defun mu4e-set-account ()
          "Set the account for composing a message."
          (let* ((account
                  (if mu4e-compose-parent-message
                      (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                        (string-match "/\\(.*?\\)/" maildir)
                        (match-string 1 maildir))
                    (completing-read (format "Compose with account: (%s) "
                                             (mapconcat #'(lambda (var) (car var)) mu4e-account-alist "/"))
                                     (mapcar #'(lambda (var) (car var)) mu4e-account-alist)
                                     nil t nil nil (caar mu4e-account-alist))))
                 (account-vars (cdr (assoc account mu4e-account-alist))))
            (if account-vars
                (mapc #'(lambda (var)
                          (set (car var) (cadr var)))
                      account-vars)
              (error "No email account found"))))

        (add-hook 'mu4e-compose-pre-hook 'mu4e-set-account)

        (setq mu4e-bookmarks '(
                               ("flag:unread AND NOT flag:trashed AND NOT maildir:/gmail/spam"
                                "Unread messages"     ?u)
                               ("date:today..now"                  "Today's messages"     ?t)
                               ("date:7d..now"                     "Last 7 days"          ?w)
                               ("mime:image/*"                     "Messages with images" ?p)))

        (add-hook 'mu4e-compose-mode-hook 'mml-secure-message-sign)
        (add-hook 'mu4e-view-mode-hook '(lambda ()
                                          (local-set-key (kbd "<end>") 'end-of-line)
                                          (local-set-key (kbd "<home>") 'beginning-of-line)))

        (setq mu4e-view-show-images t)
        (when (fboundp 'imagemagick-register-types)
          (imagemagick-register-types))
        (add-to-list 'mu4e-view-actions
                     '("View in browser" . mu4e-action-view-in-browser) t)



        ;; don't keep message buffers around
        (setq message-kill-buffer-on-exit t)))
#+end_src
* indentation
#+begin_src emacs-lisp :tangle yes
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
#+end_src
* lisp
#+begin_src emacs-lisp :tangle yes
  (use-package lisp-mode
    :init
    (progn
      (use-package paredit
        :diminish paredit-mode
        :ensure t
        :commands enable-paredit-mode)
      (use-package elisp-slime-nav
        :diminish elisp-slime-nav-mode
        :ensure t
        :commands turn-on-elisp-slime-nav-mode)
      (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
        (add-hook hook 'turn-on-elisp-slime-nav-mode)
        (add-hook hook 'enable-paredit-mode))
      (use-package eldoc
        :diminish eldoc-mode
        :defer t
        :init
        (progn
          (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
          (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
          (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)))))
#+end_src
* flycheck
#+begin_src emacs-lisp :tangle yes
  (use-package flycheck
    :ensure t
    :diminish flycheck-mode
    :defer t
    :config (progn (add-hook 'after-init-hook #'global-flycheck-mode)
                   (setq flycheck-emacs-lisp-load-path 'inherit)))
  ;; (eval-after-load 'flycheck
  ;;   '(add-to-list 'flycheck-checkers 'haskell-process))
  ;; (require 'haskell-flycheck)
#+end_src
* browser
#+begin_src emacs-lisp :tangle yes
  (setq browse-url-browser-function 'browse-url-xdg-open)
#+end_src
* gdb
#+begin_src emacs-lisp :tangle yes
  (setq gdb-many-windows t)
#+end_src
* yasnippet
#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet
    :diminish yas-minor-mode
    :ensure t
    :commands yas-global-mode
    :idle
    (progn
      (setq yas-snippet-dirs '("~/code/emacs/snippets/yasnippet-snippets"))
      (yas-global-mode t)))
  (use-package helm-c-yasnippet
    :ensure t
    :bind (("C-c y" . helm-yas-complete))
    :config (setq helm-yas-display-key-on-candidate t))
#+end_src
* symlinks
#+begin_src emacs-lisp :tangle yes
  (setq vc-follow-symlinks t)
#+end_src
* magit
#+begin_src emacs-lisp :tangle yes
  (add-hook 'magit-mode-hook 'magit-load-config-extensions)
#+end_src
* emmet
#+begin_src emacs-lisp :tangle yes
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook  'emmet-mode)
#+end_src
* pkgbuild
#+begin_src emacs-lisp :tangle yes
  (use-package pkgbuild-mode
    :ensure t
    :mode "/PKGBULD$")
#+end_src
* abbrev
#+begin_src emacs-lisp :tangle yes
  (use-package abbrev
    :diminish abbrev-mode
    :config
    (progn (abbrev-mode)
           (setq abbrev-file-name "~/.emacs.d/abbrev_defs")))
#+end_src
* ediff
#+begin_src emacs-lisp :tangle yes
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (setq ediff-split-window-function 'split-window-horizontally)
#+end_src
* reveal
#+begin_src emacs-lisp :tangle yes
  (setq org-reveal-root "file:///home/moritz/code/web/reveal.js/")
  (setq org-reveal-title-slide-template
        "<h1>%t</h1>
         <h2>%a</h2>
         <h2>%d</h2>")
#+end_src
* impress
#+begin_src emacs-lisp :tangle yes
  (setq org-impress-js-javascript "/home/moritz/code/web/impress.js/js/impress.js")
  (setq org-impress-js-stylesheet "/home/moritz/code/web/impress.js/css/impress-demo.css")
#+end_src
* idris
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'load-path "~/code/idris/idris-mode")
  (require 'idris-mode)
  (setq idris-metavariable-list-show-expanded t)
#+end_src
* skewer
#+begin_src emacs-lisp :tangle yes
  (add-hook 'js2-mode-hook 'skewer-mode)
  (add-hook 'css-mode-hook 'skewer-css-mode)
  (add-hook 'html-mode-hook 'skewer-html-mode)
#+end_src
* gpgfix
#+begin_src emacs-lisp :tangle yes
  (defun epg--list-keys-1 (context name mode)
    (let ((args (append (if (epg-context-home-directory context)
                            (list "--homedir"
                                  (epg-context-home-directory context)))
                        '("--with-colons" "--no-greeting" "--batch"
                          "--with-fingerprint" "--with-fingerprint")
                        (unless (eq (epg-context-protocol context) 'CMS)
                          '("--fixed-list-mode"))))
          (list-keys-option (if (memq mode '(t secret))
                                "--list-secret-keys"
                              (if (memq mode '(nil public))
                                  "--list-keys"
                                "--list-sigs")))
          (coding-system-for-read 'binary)
          keys string field index)
      (if name
          (progn
            (unless (listp name)
              (setq name (list name)))
            (while name
              (setq args (append args (list list-keys-option (car name)))
                    name (cdr name))))
        (setq args (append args (list list-keys-option))))
      (with-temp-buffer
        (apply #'call-process
               (epg-context-program context)
               nil (list t nil) nil args)
        (goto-char (point-min))
        (while (re-search-forward "^[a-z][a-z][a-z]:.*" nil t)
          (setq keys (cons (make-vector 15 nil) keys)
                string (match-string 0)
                index 0
                field 0)
          (while (and (< field (length (car keys)))
                      (eq index
                          (string-match "\\([^:]+\\)?:" string index)))
            (setq index (match-end 0))
            (aset (car keys) field (match-string 1 string))
            (setq field (1+ field))))
        (nreverse keys))))
#+end_src
* hydra
#+begin_src emacs-lisp :tangle yes
  (use-package hydra
    :ensure t)
  (global-set-key
   (kbd "M-ö")
   (defhydra hydra-window (:color amaranth)
     "window"
     ("n" windmove-left)
     ("r" windmove-down)
     ("t" windmove-up)
     ("d" windmove-right)
     ("v" (lambda ()
            (interactive)
            (split-window-right)
            (windmove-right))
      "vert")
     ("x" (lambda ()
            (interactive)
            (split-window-below)
            (windmove-down))
      "horz")
     ("t" transpose-frame "'")
     ("o" delete-other-windows "one" :color blue)
     ("a" ace-window "ace")
     ("s" ace-swap-window "swap")
     ("k" ace-delete-window "del")
     ("i" ace-maximize-window "ace-one" :color blue)
     ("b" helm-mini "buf")
     ("f" helm-find-files "file")
     ("m" headlong-bookmark-jump "bmk")
     ("q" nil "cancel")))
  (defhydra hydra-zoom (global-map "<f2>")
    "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out"))
  (defhydra hydra-error (global-map "M-g")
    "goto-error"
    ("h" first-error "first")
    ("j" next-error "next")
    ("k" previous-error "prev")
    ("v" recenter-top-bottom "recenter")
    ("q" nil "quit"))
  (use-package windmove)
  (defun hydra-move-splitter-left (arg)
    "Move window splitter left."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (shrink-window-horizontally arg)
      (enlarge-window-horizontally arg)))
  (defun hydra-move-splitter-right (arg)
    "Move window splitter right."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (enlarge-window-horizontally arg)
      (shrink-window-horizontally arg)))
  (defun hydra-move-splitter-up (arg)
    "Move window splitter up."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (enlarge-window arg)
      (shrink-window arg)))
  (defun hydra-move-splitter-down (arg)
    "Move window splitter down."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (shrink-window arg)
      (enlarge-window arg)))
  (global-set-key
   (kbd "M-ü")
   (defhydra hydra-splitter ()
     "splitter"
     ("n" hydra-move-splitter-left)
     ("r" hydra-move-splitter-down)
     ("t" hydra-move-splitter-up)
     ("d" hydra-move-splitter-right)
     ("q" nil "quit")))
  (use-package volume
    :ensure t)
  (global-set-key
   (kbd "C-c v")
   (defhydra hydra-volume (:color amaranth)
     ("d" (volume-lower 5))
     ("u" (volume-raise 5))
     ("n" volume-raise)
     ("p" volume-lower)
     ("q" nil "quit")))
#+end_src
* github
#+begin_src emacs-lisp :tangle yes
  (use-package oauth2
    :ensure t)
  (use-package github
    :load-path "~/code/emacs/github")
#+end_src
* guide-key
#+begin_src emacs-lisp :tangle yes
  (use-package guide-key
    :ensure t
    :defer t
    :diminish guide-key-mode
    :idle
    (progn
      (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-c" "C-c h"))
      (guide-key-mode 1)))
#+end_src
* multiple cursors
#+begin_src emacs-lisp :tangle yes
  (use-package multiple-cursors
    :ensure t
    :bind
    (("C-S-c C-S-c" . mc/edit-lines)
     ("C->" . mc/mark-next-like-this)
     ("C-<"  . mc/mark-previous-like-this)
     ("C-c C-<" . mc/mark-all-like-this)))
#+end_src
* sx
#+begin_src emacs-lisp :tangle yes
  (use-package sx
    :ensure t)
#+end_src
* markdown
#+begin_src emacs-lisp :tangle yes
  (use-package markdown-mode
    :ensure t)
#+end_src
* unbound
#+begin_src emacs-lisp :tangle yes
  (use-package unbound
    :ensure t)
#+end_src
* holidays
#+begin_src emacs-lisp :tangle yes
  (setq holiday-general-holidays
        '((holiday-fixed 1 1 "Neujahr")
          (holiday-fixed 5 1 "Tag der Arbeit")
          (holiday-fixed 10 3 "Tag der deutschen Einheit")))
  (setq holiday-christian-holidays
        '((holiday-fixed 12 25 "1. Weihnachtstag")
          (holiday-fixed 12 26 "2. Weihnachtstag")
          (holiday-fixed 1 6 "Heilige 3 Könige")
          (holiday-fixed 11 1 "Allerheiligen")
          ;; Date of Easter calculation taken from holidays.el.
          (let* ((century (1+ (/ displayed-year 100)))
                 (shifted-epact (% (+ 14 (* 11 (% displayed-year 19))
                                      (- (/ (* 3 century) 4))
                                      (/ (+ 5 (* 8 century)) 25)
                                      (* 30 century))
                                   30))
                 (adjusted-epact (if (or (= shifted-epact 0)
                                         (and (= shifted-epact 1)
                                              (< 10 (% displayed-year 19))))
                                     (1+ shifted-epact)
                                   shifted-epact))
                 (paschal-moon (- (calendar-absolute-from-gregorian
                                   (list 4 19 displayed-year))
                                  adjusted-epact))
                 (easter (calendar-dayname-on-or-before 0 (+ paschal-moon 7))))
            (filter-visible-calendar-holidays
             (mapcar
              (lambda (l)
                (list (calendar-gregorian-from-absolute (+ easter (car l)))
                      (nth 1 l)))
              '(
                ( -2 "Karfreitag")
                (  0 "Ostersonntag")
                ( +1 "Ostermontag")
                (+39 "Christi Himmelfahrt")
                (+49 "Pfingstsonntag")
                (+50 "Pfingstmontag")
                (+60 "Fronleichnam")
                ))))))
  (setq calendar-holidays (append holiday-general-holidays holiday-christian-holidays))
#+end_src
